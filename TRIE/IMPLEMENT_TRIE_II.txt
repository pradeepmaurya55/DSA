class Node
{
    public:
    Node* links[26];
    int countPrefix;
    int countEnd;
    Node()
    {
        countPrefix=0;
        countEnd=0;
    }
};

class Trie
{
    private:
    Node* root;
    public:

    Trie()
    {
        root=new Node();
    }

    void insert(string &word)
    {
        Node* node=root;
        for(int i=0;i<word.size();i++)
        {
            if(node->links[word[i]-'a']==NULL)
                node->links[word[i]-'a']=new Node();
            
            node=node->links[word[i]-'a'];
            node->countPrefix++;
        }
        node->countEnd++;
        
        
    }

    int countWordsEqualTo(string &word)
    {
        Node* node = root;
        for(int i=0;i<word.size();i++)
        {
            if(node->links[word[i]-'a']==NULL) return 0;
            node=node->links[word[i]-'a'];
        }
        return node->countEnd;
    }

    int countWordsStartingWith(string &word)
    {
        Node* node = root;
        for(int i=0;i<word.size();i++)
        {
            if(node->links[word[i]-'a']==NULL) return 0;
            node=node->links[word[i]-'a'];
        }
        return node->countPrefix;
    }

    void erase(string &word)
    {
        Node* node=root;
        for(int i=0;i<word.size();i++)
        {
            if(node->links[word[i]-'a'])
              node=node->links[word[i]-'a'];  
            node->countPrefix--;
        }
        node->countEnd--;
    }
};
