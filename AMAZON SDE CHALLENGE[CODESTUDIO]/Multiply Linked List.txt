Node *reverse(Node *head)
{
    if(!head || !head->next) return head;
    
    Node *cur=head,*prev=NULL;
    while(cur)
    {
        Node *nxt=cur->next;
        cur->next=prev;
        prev=cur;
        cur=nxt;
    }
    return prev;
}

Node *newList(Node *l1,Node *l2)
{
    Node *head=new Node(-1);
    Node *last=head;
    int n=10000;
    while(l1)
    {
        last->next=new Node(0);
        last=last->next;
        l1=l1->next;
    }
    while(l2)
    {
        last->next=new Node(0);
        last=last->next;
        l2=l2->next;
    }
    
    return head->next;
}
Node *removeEmpty(Node *head)
{
    Node *newhead;
    bool flag=false;
    while(head)
    {
        if(head->data!=0)
        {
            newhead=head;
            flag=true;
            break;
        }
        head=head->next;
    }
    
    return flag==true?newhead:new Node(0);
}
Node *multiplyLL(Node *head1, Node *head2)
{
    // normal multiplication method
    //take one digit of second num & multiply 
    //every digit of first number
    head1=reverse(head1);
    head2=reverse(head2);
    Node *second=head2;
    Node *ansList=newList(head1,head2);
    Node *start=ansList;
    
    while(second)
    {
        int data =second->data;
        int carry=0;
        Node *first=head1;
        Node *ansNode=start;
        while(first)
        {
            int val=data*first->data+carry+ansNode->data;
            ansNode->data=val%10;
            carry=val/10;
            ansNode=ansNode->next;
            first=first->next;
        }
        while(carry>0)
        {
            ansNode->data=(ansNode->data+carry)%10;
            ansNode=ansNode->next;
            carry/=10;
        }
        start=start->next;
        second=second->next;
    }
    ansList=reverse(ansList);
    return removeEmpty(ansList);    
}