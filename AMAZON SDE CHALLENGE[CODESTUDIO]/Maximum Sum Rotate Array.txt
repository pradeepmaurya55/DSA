//Sliding window approach
int maxSum(vector<int> &arr, int n)
{
    //kind of sliding window approach
    //calculate normal sum of all elements
    int sum=0;
    for(int i=0;i<n;i++) sum+=arr[i];
    
    //calculate i*arr[i] sum for no rotation
    int currSum=0;
    for(int i=1;i<n;i++) currSum+=i*arr[i];
    
    int maxxSum=currSum;
    
    //calculate for roatation upto n
    for(int i=1;i<n;i++)
    {
        int changeSum=currSum + sum-(arr[n-i]*n);
        currSum=changeSum;
        maxxSum=max(maxxSum,changeSum);
    }
    return maxxSum;
}

//Naive Solution partially accepted
int maxSum(vector<int> &arr, int n)
{
    int maxa=INT_MIN;
    for(int rotation=0;rotation<n;rotation++)
    {
        int sum=0;
        for(int i=1;i<n;i++)
        {
            sum+=i*arr[(i+rotation)%n];
        }
        maxa=max(maxa,sum);
    }
    return maxa;
}