#include <bits/stdc++.h> 

bool shortestSuperSeq(vector<int> &pri, vector<vector<int>> &sec, int N, int X, int Y)
{
    if(pri.size()<=0) return false;
    
    vector<int> temp;
    unordered_map<int,int> inDegree;
    unordered_map<int,vector<int>> graph;
    
    //create connection graph
    for(int i=0;i<sec.size();i++)
    {
        for(int j=0;j<sec[i].size();j++)
        {
            inDegree[sec[i][j]]=0;
            graph[sec[i][j]]= vector<int>();
        }
    }
    for(int i=0;i<sec.size();i++)
    {
        for(int j=1;j<sec[i].size();j++)
        {
            int parent=sec[i][j-1];
            int child=sec[i][j];
            graph[parent].push_back(child);
            inDegree[child]++;
        }
    }
    
    if(inDegree.size() != pri.size()) return false;
    
    queue<int>  curr;
    for(auto n:inDegree)
    {
        if(n.second==0) curr.push(n.first);
    }
    
    while(!curr.empty())
    {
        if(curr.size()>1) return false;
        if(pri[temp.size()]!=curr.front()) return false;
        
        int vertex=curr.front();
        curr.pop();
        temp.push_back(vertex);
        vector<int> children=graph[vertex];
        for(auto c:children)
        {
            inDegree[c]--;
            if(inDegree[c]==0) curr.push(c);
        }
    }
    return temp.size()==pri.size();
}

