#include<bits/stdc++.h>

void convertor(unordered_map<int,list<int>> & adj,vector<vector<int>> &edges){
    for(int i = 0 ;i<edges.size();i++){
        int u = edges[i][0];
        int v = edges[i][1];
        adj[u].push_back(v);
    }
}

void bfs(  unordered_map<int,list<int>> & adj,int v,vector<int>&ans){
    vector<int>indegree(v,0);
    for(auto x : adj){
        for(auto y: x.second){
            indegree[y]++;
        }
    }
    queue<int>q;
    for(int i = 0 ; i<v;i++){
        if(indegree[i] == 0)
        {
            q.push(i);
        }
    }
    while(q.empty()==false ){
        
        int curr = q.front();
        q.pop();
        ans.push_back(curr);
        for(auto it : adj[curr]){
            indegree[it]--;
            if(indegree[it]==0){
                q.push(it);
            }
        }
    }
}


vector<int> topologicalSort(vector<vector<int>> &edges, int v, int e)  {
    vector<int>ans;
     unordered_map<int,list<int>> adj;
    convertor(adj,edges);
    vector<bool>visited(v,false);
    bfs(adj,v,ans);

    return ans;
    
}