#include<bits/stdc++.h>

void convertor(unordered_map<int,list<pair<int,int>>> &adj,vector<pair<pair<int, int>,int>> g)
{
     for(int i=0;i<g.size();i++){
       
       int u = g[i].first.first-1;
       int v = g[i].first.second-1;
       
       int wt = g[i].second;
       
       adj[u].push_back(make_pair(v,wt));   // undirected
       adj[v].push_back(make_pair(u,wt));   // undirected 
       
   }
}

vector<pair<pair<int, int>, int>> calculatePrimsMST(int n, int m, vector<pair<pair<int, int>, int>> &g)
{
    unordered_map<int,list<pair<int,int>>> adj;
    convertor(adj,g);
    
    vector<int> key(n);
    vector<int> mst(n);
    vector<int> parent(n);
    
    for(int i=0;i<n;i++)
    {
        key[i]=INT_MAX;
        parent[i]=-1;
        mst[i]=false;
    }
    
    key[0]=0;
    
    for(int i=0;i<n-1;i++)
    {
        int mini=INT_MAX;
        int u;
        
        for(int j=0;j<n;j++) //FIND MINIMUM
        {
            if(mst[j]==false && key[j]<mini)
            {
                u=j;
                mini=key[j];
            }
        }
        
        mst[u]=true;
        
        for(auto neigh:adj[u]) //PROCESS NEIGHBOURS
        {
            int dest = neigh.first;
            int wt=neigh.second;
            if(mst[dest]==false && wt<key[dest])
            {
                key[dest]=wt;
                parent[dest]=u;
            }
        }
        
    }
    
    vector<pair<pair<int, int>, int>> ans;
    for(int i=1;i<n;i++)
    {
        ans.push_back({{parent[i]+1,i+1},key[i]});
    }
    return ans;
}
