void dfs(vector<int> &temp, vector<int> &vis, int v, int target, vector<vector<int>> &adj)
{
   for(int i=0;i<v;i++)
   {
       if(!vis[i] && adj[target][i])
       {
           temp.push_back(i);
           vis[i]=1;
           dfs(temp,vis,v,i,adj);
       }
   }
}


vector<vector<int>> depthFirstSearch(int v, int E, vector<vector<int>> &edges)
{
    vector<vector<int>> adj(v,vector<int>(v,0));
    
    for(int i=0;i<edges.size();i++)
    {
        adj[edges[i][0]][edges[i][1]]=1;
        adj[edges[i][1]][edges[i][0]]=1;
    }
    
    vector<vector<int>>ans;
    vector<int> vis(v,0);
    
    for(int i=0;i<v;i++)
    {
        vector<int> temp;
        if(!vis[i]) 
        { 
            temp.push_back(i);
            vis[i]=1;
            dfs(temp,vis,v,i,adj);
            ans.push_back(temp);
        }
    }
    
    return ans;
}