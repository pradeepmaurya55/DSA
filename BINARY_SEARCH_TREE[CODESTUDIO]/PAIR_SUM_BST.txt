/**********************************************************

    Following is the Binary Tree Node structure:

    template <typename T>
    class BinaryTreeNode {
        public: 
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this->data = data;
            left = NULL;
            right = NULL;
        }

        ~BinaryTreeNode() {
            if (left)
                delete left;
            if (right)
                delete right;
        }
    };
***********************************************************/

#include<bits/stdc++.h>

bool pairSumBst(BinaryTreeNode<int> *root, int k)
{
    stack<BinaryTreeNode<int> *>less,more;
    BinaryTreeNode<int> *l=root,*m=root;
    while((!less.empty() || l) && (!more.empty() || m))
    {
       while(l)
       {
           less.push(l);
           l=l->left;
       }
       while(m)
       {
           more.push(m);
           m=m->right;
       }
        
        if(less.top()->data + more.top()->data == k) return true;
        
        if(less.top()->data + more.top()->data > k)
        {
            BinaryTreeNode<int> *t=more.top();
           more.pop();
            m=t->left;
        }
        else
        {
            BinaryTreeNode<int> *t=less.top();
           less.pop();
            l=t->right;
        }
    }
    
    return false;
}