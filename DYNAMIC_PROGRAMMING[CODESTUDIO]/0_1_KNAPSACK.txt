#include<bits/stdc++.h>
int knapsack(vector<int> &values, vector<int> &wt, int w,int ind,vector<vector<int>> &dp)
{
    if(ind == 0)
    {
        if(wt[ind]<=w) return values[ind];
        else
           return 0;        
    }
    
    if(dp[ind][w]!=-1) return dp[ind][w];
    
    int notTake=0+knapsack(values,wt,w,ind-1,dp);
    int take=INT_MIN;
    if(wt[ind]<=w)
        take=values[ind]+knapsack(values,wt,w-wt[ind],ind-1,dp);
    
    return dp[ind][w]=max(notTake,take);
        
}

int maxProfit(vector<int> &values, vector<int> &weights, int n, int w)
{
	vector<vector<int>> dp(n,vector<int>(w+1,-1));
    return knapsack(values,weights,w,n-1,dp);
}